{
	/**
	* Directory where are stored files needed for testing
	* (e.g ProcessWire installation, ...).
	*
	* Path is relative to the this file's parent directory.
	*/
	"tmpDir": ".pw-test",

	/**
	* Database connection parameters
	*
	* They are used to create the database
	* for ProcessWire installation, so the user
	* must have the priviledges to create a database.
	*/
	"db": {
		"host": "localhost",
		"port": 3306,
		"user": "root",
		"pass": "",
		"name": "pw_test" // name of the database
	},

	/**
	* List of ProcessWire tags/versions used for testing.
	*
	* It doesn't have to be exact version number.
	*
	* For each tag/version will be found latest matching
	* existing tag (e.g. 3.0 -> 3.0.42).
	*
	* Versions are tested in the specified order.
	*
	* Minimal supported version is 2.5.
	*
	* Example:
	*	"testTags": ["2.5", "2.6", "2.7", "3.0"]
	*/
	"testTags": [],

	/**
	* Copy tested project source files to specified
	* destinations in ProcessWire installation.
	*
	* Destination paths are relative to ProcessWire installation root.
	*
	* Source paths are relative to the config file's parent directory.
	*
	* Sources can be either array or a single string.
	* If array of sources is specified, the destination
	* is considered a directory where all sources are copied.
	* If single string source is specified, one to one copy is used.
	*
	* If source item is a directory, it will be copied recursively.
	*
	* Example:
	*	"copySources": {
	*		"site/templates/HomeTemplate.php": "src/templates/home.php",
	*		"site/modules/Module": [
	*			"Libs",
	*			"Module.module"
	*		]
	*	}
	*/
	"copySources": {},

	/**
	* Command to execute a test suite.
	*
	* Path to the ProcessWire installation will be in `PW_PATH` environment variable.
	*
	* Example:
	* 	"testCmd": "vendor/bin/phpunit --bootstrap vendor/autoload.php tests/Test.php"
	*/
	"testCmd": "",

	/**
	* Test runner can wait and ask the user what to do
	* after each test suite against a ProcessWire instance is completed.
	*
	* Possible values are:
	* 'never' - never wait (default)
	* 'onFailure' - wait when tests failed
	* 'always' - always wait
	*/
	"waitAfterTests": "never"
}